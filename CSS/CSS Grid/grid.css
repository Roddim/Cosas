* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    font-size: 16px;
    line-height: 1.5;
    color: #333;
    background: white;
}

.container {
    max-width: 960px;       /* this is the grid container */
    margin: 100px auto;
    padding: 10px;
    display: grid;          /* We need to specify how many columns and how big */
    /* grid-template-columns: 1st column 100px second column  200px; you can also use pertentajes or fractions like below */
    grid-template-columns: repeat(3, 1fr); /* makes 3 columns of the same size that take the whole width of the container */
    /* column-gap: 10px;    adds space between the columns 
    row-gap: 10px;  */
    gap: 10px;  /* Same thing as column-gap and row-gap */

    /* grid-auto-rows: 200px;   sets a maximun height in the boxes */
    /* grid-auto-rows: minmax(200px, auto);     does the same but specifying a minimun height and maximun that would be auto here */
    /* grid-template-rows: 200px 100px 200px; The same as columns but with rows */
    
    /* align-items: start;          stretch is the default, aligns items vertically  */
    /* justify-content: center;     mover the whole columns */
    /* We can also align specific items */
    grid-template-columns: repeat (auto-fill, minmax(200px, 1fr));  /* Responsivenes, will stack (wrap) the boxes if one of the items goes below 200px */
    
}

.item {
    background: steelblue;
    color: white;
    font-size: 20px;
    padding: 20px;
    border: skyblue 1px solid;
}

/* "'align-items'" is for the container and "align-self" is for the items */

/* .item:nth-of-type(2) {
    height: 100px;
    width: 100px;

    align-self: center;
    justify-self: center;
} */

/* .item:nth-of-type(1) {
    background: black;
    grid-column-start: 1;
    grid-column-end: 3;
    grid-column: 1 / span 2;    /* Does the same as above, not as good  
    grid-column: 1 / 3;         /* Does the same as above  
    
}

.item:nth-of-type(3) {
    background: #333;
    grid-row: 2 / 4;
}

.item:nth-of-type(4) {
    background: #152;
    grid-row: 2 / 4;
}   */

@media (max-width: 500px) {
    .container {                        /* this'll make the columns stack if below 500px, responsivenes */
        grid-template-columns: 1fr;
    }

}


